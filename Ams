import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;

public class MainGUI {
    private static final String VISITOR_DATA_FILE = "visitor_data.csv";
    private static final String SECURITY_USERNAME = "security";
    private static final char[] SECURITY_PASSWORD = {'s', 'e', 'c', 'u', 'r', 'i', 't', 'y'};

    private JFrame mainFrame;
    private JButton securityButton;
    private JButton managerButton;
    private JButton residentButton;

    public MainGUI() {
        mainFrame = new JFrame("User Options");
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainFrame.setSize(300, 200);
        mainFrame.setLayout(new GridLayout(3, 1));

        securityButton = new JButton("Security");
        managerButton = new JButton("Manager");
        residentButton = new JButton("Resident");

        securityButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                SecurityLoginDialog loginDialog = new SecurityLoginDialog();
                loginDialog.setVisible(true);
                if (loginDialog.isLoginSuccessful()) {
                    displaySecurityVisitorForm();
                }
            }
        });

        managerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                displayVisitorHistory();
            }
        });

        residentButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(mainFrame, "Resident selected.");
            }
        });

        mainFrame.add(securityButton);
        mainFrame.add(managerButton);
        mainFrame.add(residentButton);
    }

    public void display() {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                mainFrame.setVisible(true);
            }
        });
    }

    private void displaySecurityVisitorForm() {
        JFrame visitorFrame = new JFrame("Visitor Information");
        visitorFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        visitorFrame.setSize(400, 300);

        JTextField carPlateField = new JTextField();
        JTextField nameField = new JTextField();
        JTextField reasonField = new JTextField();
        JTextField residentUnitField = new JTextField();

        JButton addButton = new JButton("Add Visitor");
        JButton exitButton = new JButton("Exit Visitor");

        DefaultListModel<String> visitorListModel = new DefaultListModel<>();
        JList<String> visitorList = new JList<>(visitorListModel);
        JScrollPane scrollPane = new JScrollPane(visitorList);

        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String carPlate = carPlateField.getText();
                String name = nameField.getText();
                String reason = reasonField.getText();
                String residentUnit = residentUnitField.getText();

                String visitorInfo = "Car Plate: " + carPlate +
                        " | Name: " + name +
                        " | Reason: " + reason +
                        " | Resident Unit: " + residentUnit;

                visitorListModel.addElement(visitorInfo);

                VisitorEntry visitorEntry = new VisitorEntry(carPlate, name, reason, residentUnit, LocalDateTime.now());
                saveVisitorEntry(visitorEntry);

                clearFields(carPlateField, nameField, reasonField, residentUnitField);
            }
        });

        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedIndex = visitorList.getSelectedIndex();
                if (selectedIndex != -1) {
                    String visitorInfo = visitorListModel.getElementAt(selectedIndex);
                    String carPlate = extractValueFromVisitorInfo(visitorInfo, "Car Plate:");
                    String name = extractValueFromVisitorInfo(visitorInfo, "Name:");

                    int confirm = JOptionPane.showConfirmDialog(visitorFrame,
                            "Are you sure " + name + " with car plate " + carPlate + " is exiting?",
                            "Confirm Exit",
                            JOptionPane.YES_NO_OPTION);

                    if (confirm == JOptionPane.YES_OPTION) {
                        visitorListModel.remove(selectedIndex);
                        exitVisitor(carPlate);
                    }
                }
            }
        });

        visitorFrame.setLayout(new BorderLayout());
        JPanel formPanel = new JPanel(new GridLayout(4, 2));
        formPanel.add(new JLabel("Car Plate:"));
        formPanel.add(carPlateField);
        formPanel.add(new JLabel("Name:"));
        formPanel.add(nameField);
        formPanel.add(new JLabel("Reason:"));
        formPanel.add(reasonField);
        formPanel.add(new JLabel("Resident Unit:"));
        formPanel.add(residentUnitField);

        JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.add(addButton);
        buttonPanel.add(exitButton);

        visitorFrame.add(formPanel, BorderLayout.NORTH);
        visitorFrame.add(scrollPane, BorderLayout.CENTER);
        visitorFrame.add(buttonPanel, BorderLayout.SOUTH);

        visitorFrame.setVisible(true);
    }

    private void displayVisitorHistory() {
        JFrame historyFrame = new JFrame("Visitor History");
        historyFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        historyFrame.setSize(500, 400);

        JTextArea historyTextArea = new JTextArea();
        JScrollPane scrollPane = new JScrollPane(historyTextArea);

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

        try (BufferedReader reader = new BufferedReader(new FileReader(VISITOR_DATA_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] entryParts = line.split(",");
                if (entryParts.length >= 5) {
                    String carPlate = entryParts[0];
                    String name = entryParts[1];
                    String reason = entryParts[2];
                    String residentUnit = entryParts[3];
                    String entryTime = entryParts[4];

                    LocalDateTime entryDateTime = LocalDateTime.parse(entryTime, formatter);

                    String exitTime = entryParts.length > 5 && !entryParts[5].equals("N/A") ? entryParts[5] : "N/A";
                    LocalDateTime exitDateTime = null;
                    if (!exitTime.equals("N/A")) {
                        exitDateTime = LocalDateTime.parse(exitTime, formatter);
                    }

                    String formattedEntry = "Car Plate: " + carPlate + "\n"
                            + "Name: " + name + "\n"
                            + "Reason: " + reason + "\n"
                            + "Resident Unit: " + residentUnit + "\n"
                            + "Entry Time: " + entryDateTime.format(formatter) + "\n"
                            + "Exit Time: " + (exitDateTime != null ? exitDateTime.format(formatter) : "N/A") + "\n\n";

                    historyTextArea.append(formattedEntry);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(historyFrame, "Error reading visitor data file.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        historyFrame.add(scrollPane);
        historyFrame.setVisible(true);
    }

    private void saveVisitorEntry(VisitorEntry visitorEntry) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(VISITOR_DATA_FILE, true))) {
            String entryString = visitorEntry.toFormattedString();
            writer.write(entryString);
            writer.newLine();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(mainFrame, "Error saving visitor entry.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void exitVisitor(String carPlate) {
        try {
            File tempFile = new File("temp.csv");
            BufferedReader reader = new BufferedReader(new FileReader(VISITOR_DATA_FILE));
            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

            String line;
            while ((line = reader.readLine()) != null) {
                String[] entryParts = line.split(",");
                if (entryParts.length >= 5 && entryParts[0].equals(carPlate)) {
                    if (entryParts.length == 5) {
                        String[] newEntryParts = Arrays.copyOf(entryParts, 6);
                        entryParts = newEntryParts;
                    }
                    if (entryParts[5].equals("N/A")) {
                        LocalDateTime now = LocalDateTime.now();
                        entryParts = Arrays.copyOf(entryParts, 6);
                        entryParts[5] = now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                    }
                }
                writer.write(String.join(",", entryParts));
                writer.newLine();
            }

            reader.close();
            writer.close();

            File oldFile = new File(VISITOR_DATA_FILE);
            oldFile.delete();
            tempFile.renameTo(oldFile);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(mainFrame, "Error exiting visitor.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearFields(JTextField... fields) {
        for (JTextField field : fields) {
            field.setText("");
        }
    }

    private String extractValueFromVisitorInfo(String visitorInfo, String key) {
        int startIndex = visitorInfo.indexOf(key) + key.length();
        return visitorInfo.substring(startIndex).trim();
    }

    private class SecurityLoginDialog extends JDialog {
        private JTextField usernameField;
        private JPasswordField passwordField;
        private boolean loginSuccessful;

        public SecurityLoginDialog() {
            setTitle("Security Login");
            setModalityType(ModalityType.APPLICATION_MODAL);
            setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            setSize(300, 150);
            setLayout(new GridLayout(3, 2));

            usernameField = new JTextField();
            passwordField = new JPasswordField();

            JButton loginButton = new JButton("Login");
            loginButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String username = usernameField.getText();
                    char[] password = passwordField.getPassword();

                    if (username.equals(SECURITY_USERNAME) && comparePasswords(password, SECURITY_PASSWORD)) {
                        loginSuccessful = true;
                        dispose();
                    } else {
                        JOptionPane.showMessageDialog(SecurityLoginDialog.this, "Invalid username or password.", "Login Failed", JOptionPane.ERROR_MESSAGE);
                        clearFields(usernameField, passwordField);
                    }
                }
            });

            add(new JLabel("Username:"));
            add(usernameField);
            add(new JLabel("Password:"));
            add(passwordField);
            add(loginButton);
        }

        public boolean isLoginSuccessful() {
            return loginSuccessful;
        }

        private void clearFields(JTextField... fields) {
            for (JTextField field : fields) {
                field.setText("");
            }
        }

        private boolean comparePasswords(char[] password1, char[] password2) {
            if (password1.length != password2.length) {
                return false;
            }
            for (int i = 0; i < password1.length; i++) {
                if (password1[i] != password2[i]) {
                    return false;
                }
            }
            return true;
        }
    }

    private class VisitorEntry {
        private String carPlate;
        private String name;
        private String reason;
        private String residentUnit;
        private LocalDateTime entryTime;

        public VisitorEntry(String carPlate, String name, String reason, String residentUnit, LocalDateTime entryTime) {
            this.carPlate = carPlate;
            this.name = name;
            this.reason = reason;
            this.residentUnit = residentUnit;
            this.entryTime = entryTime;
        }

        public String toFormattedString() {
            return carPlate + "," + name + "," + reason + "," + residentUnit + "," + entryTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        }
    }

    public static void main(String[] args) {
        MainGUI mainGUI = new MainGUI();
        mainGUI.display();
    }
}
